// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ORF_index
Rcpp::DataFrame ORF_index(SEXP Tags, SEXP Sequence, int trans_tab);
RcppExport SEXP _microseq_ORF_index(SEXP TagsSEXP, SEXP SequenceSEXP, SEXP trans_tabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Tags(TagsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Sequence(SequenceSEXP);
    Rcpp::traits::input_parameter< int >::type trans_tab(trans_tabSEXP);
    rcpp_result_gen = Rcpp::wrap(ORF_index(Tags, Sequence, trans_tab));
    return rcpp_result_gen;
END_RCPP
}
// extractSeq
SEXP extractSeq(SEXP Gseq, SEXP Left, SEXP Right, SEXP Strand);
RcppExport SEXP _microseq_extractSeq(SEXP GseqSEXP, SEXP LeftSEXP, SEXP RightSEXP, SEXP StrandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Gseq(GseqSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Left(LeftSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Right(RightSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Strand(StrandSEXP);
    rcpp_result_gen = Rcpp::wrap(extractSeq(Gseq, Left, Right, Strand));
    return rcpp_result_gen;
END_RCPP
}
// read_fastq
Rcpp::List read_fastq(std::string path);
RcppExport SEXP _microseq_read_fastq(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fastq(path));
    return rcpp_result_gen;
END_RCPP
}
// read_fastq_Sanger
Rcpp::List read_fastq_Sanger(std::string path);
RcppExport SEXP _microseq_read_fastq_Sanger(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fastq_Sanger(path));
    return rcpp_result_gen;
END_RCPP
}
// write_fastq
bool write_fastq(std::vector<std::string> header, std::vector<std::string> sequence, std::vector<std::string> quality, std::string path);
RcppExport SEXP _microseq_write_fastq(SEXP headerSEXP, SEXP sequenceSEXP, SEXP qualitySEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type header(headerSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type quality(qualitySEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(write_fastq(header, sequence, quality, path));
    return rcpp_result_gen;
END_RCPP
}
// read_fasta
Rcpp::List read_fasta(std::string path);
RcppExport SEXP _microseq_read_fasta(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fasta(path));
    return rcpp_result_gen;
END_RCPP
}
// write_fasta
bool write_fasta(std::vector<std::string> header, std::vector<std::string> sequence, std::string path, int width);
RcppExport SEXP _microseq_write_fasta(SEXP headerSEXP, SEXP sequenceSEXP, SEXP pathSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type header(headerSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(write_fasta(header, sequence, path, width));
    return rcpp_result_gen;
END_RCPP
}
// revComp
CharacterVector revComp(CharacterVector Seq, bool rev);
RcppExport SEXP _microseq_revComp(SEXP SeqSEXP, SEXP revSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type Seq(SeqSEXP);
    Rcpp::traits::input_parameter< bool >::type rev(revSEXP);
    rcpp_result_gen = Rcpp::wrap(revComp(Seq, rev));
    return rcpp_result_gen;
END_RCPP
}
// transl
CharacterVector transl(CharacterVector Seq, int trans_tab);
RcppExport SEXP _microseq_transl(SEXP SeqSEXP, SEXP trans_tabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type Seq(SeqSEXP);
    Rcpp::traits::input_parameter< int >::type trans_tab(trans_tabSEXP);
    rcpp_result_gen = Rcpp::wrap(transl(Seq, trans_tab));
    return rcpp_result_gen;
END_RCPP
}
